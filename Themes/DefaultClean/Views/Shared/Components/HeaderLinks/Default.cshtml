@model HeaderLinksModel

@using Nop.Core.Domain.Customers

@inject Nop.Core.IWebHelper webHelper

<nav class="header-links">
	<ul class="header-links__link-list">
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
		@if (Model.IsAuthenticated)
		{
			<li>
				<a href="@Url.RouteUrl("CustomerInfo")" class="header-links__link">
					@T("Account.MyAccount")@*@Model.CustomerName*@
				</a>
			</li>
			<li>
				<a href="@Url.RouteUrl("Logout")" class="header-links__link">
					@T("Account.Logout")
				</a>
			</li>
		}
		else
		{
			var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url) ? url.ToString() : webHelper.GetRawUrl(Context.Request);
			@if (Model.RegistrationType != UserRegistrationType.Disabled)
			{
				<li>
					<a href="@Url.RouteUrl("Register", new { returnUrl })" class="header-links__link">
						@T("Account.Register")
					</a>
				</li>
			}
			<li>
				<a href="@Url.RouteUrl("Login", new { returnUrl })" class="header-links__link">
					@T("Account.Login")
				</a>
			</li>
		}
		@if (Model.WishlistEnabled)
		{
			<li>
				<a href="@Url.RouteUrl("Wishlist")" class="header-links__link">
					<span>@T("Wishlist")</span>
					<span id="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
				</a>
			</li>
		}
		@if (Model.ShoppingCartEnabled)
		{
			<li id="topcartlink">
				<a href="@Url.RouteUrl("ShoppingCart")" class="header-links__link   header-links__link--cart">
					<span>@T("ShoppingCart")</span>
					<span id="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
				</a>
				@await Component.InvokeAsync(typeof(FlyoutShoppingCartViewComponent))
			</li>
		}
		@if (Model.AllowPrivateMessages)
		{
			<li>
				<a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })">
					<span>@T("PrivateMessages.Inbox")</span>
					<span>@Model.UnreadPrivateMessages</span>
				</a>
			</li>
		}
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
	</ul>
</nav>

<script asp-location="Footer">
	var localized_data = { AjaxCartFailure: "@T("AjaxCart.Failure")" };
	AjaxCart.init(false, '.header-links #cart-qty', '.header-links #wishlist-qty', '#flyout-cart', localized_data);
</script>

@if (Model.ShoppingCartEnabled)
{
	<script asp-location="Footer">
		$(function () {
			$('.header').on('mouseenter', '#topcartlink', function () {
				$('#flyout-cart').addClass('active');
			});
			$('.header').on('mouseleave', '#topcartlink', function () {
				$('#flyout-cart').removeClass('active');
			});
		});
	</script>
}

@if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
{
	<script asp-location="Footer">
		$(function () { 
			displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
		});
	</script>
}